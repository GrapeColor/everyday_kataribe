name: Build and deploy Docker Image

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - '*'

  workflow_dispatch:

jobs:
  generate_repository_name:
    runs-on: ubuntu-latest

    outputs:
      docker_repository: ${{ steps.generate_docker_repository_name.outputs.result }}

    steps:
      - name: Generate Docker repository name
        id: generate_docker_repository_name
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: return `ghcr.io/${'${{ github.repository }}'.toLowerCase()}`;

  generate_image_tags:
    needs: generate_repository_name

    runs-on: ubuntu-latest

    outputs:
      docker_image_tags: ${{ steps.generate_docker_image_tags.outputs.result }}

    steps:
      - name: Generate Docker images tags
        id: generate_docker_image_tags
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const repository = '${{ needs.generate_repository_name.outputs.docker_repository }}';
            const shortSHA = '${{ github.sha }}'.slice(0, 7);
            let imageTags = `${repository}:latest\n${repository}:${shortSHA}`;
            if ('${{ github.event_name }}' === 'tags') {
              const gitTag = '${{ github.ref }}'.replace(/refs\/tags\/v?/, '');
              imageTags += `\n${repository}:${gitTag}`;
            }
            return imageTags;

  build:
    needs: generate_image_tags

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install npm packages
        run: npm ci

      - name: Compile TypeScript
        run: tsc

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          push: true
          tags: ${{ needs.generate_image_tags.outputs.docker_image_tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move Docker image chace
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: [generate_repository_name, build]

    runs-on: ubuntu-latest

    steps:
      - name: Deploy docker image to remote
        env:
          APP_NAME: everyday_kataribe
          DOCKER_REPOSITORY: ${{ needs.generate_repository_name.outputs.docker_repository }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "# Download new Docker image"
            sudo docker pull ${{ env.DOCKER_REPOSITORY }}
            echo "# Stop running Docker container"
            sudo systemctl stop ${{ env.APP_NAME }}
            echo "# Clean old Docker container"
            sudo docker container prune -f
            echo "# Create new Docker container"
            sudo docker create \
            -e EVERYDAY_KATARIBE_TOKEN=${{ env.EVERYDAY_KATARIBE_TOKEN }} \
            -e TWITTER_BEARER_TOKEN=${{ env.TWITTER_BEARER_TOKEN }} \
            -e RANDOM_POST_TWEET_SCHEDULE=${{ env.RANDOM_POST_TWEET_SCHEDULE }} \
            -e ACTIVITY_STREAMING_NAME=${{ env.ACTIVITY_STREAMING_NAME }} \
            -e ACTIVITY_STREAMING_URL=${{ env.ACTIVITY_STREAMING_URL }} \
            -- name ${{ env.APP_NAME }}_worker \
            ${{ env.DOCKER_REPOSITORY }}
            echo "# Start new Docker container"
            sudo systemctl start ${{ env.APP_NAME }}
            echo "# Clean old Docker image"
            sudo docker image prune -af
