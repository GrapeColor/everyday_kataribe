name: Build and deploy Docker Image

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*'

  workflow_dispatch:

jobs:
  generate_docker_repository_name:
    runs-on: ubuntu-latest

    outputs:
      repository_name: ${{ steps.generate_repository_name.outputs.repository_name }}

    steps:
      - name: Generate repository name
        id: generate_repository_name
        run: echo "::set-output name=repository_name::ghcr.io/${{ github.repository }}" | tr A-Z a-z

  generate_docker_image_tags:
    needs: generate_docker_repository_name

    runs-on: ubuntu-latest

    outputs:
      image_tags: ${{ steps.generate_docker_image_tags.outputs.image_tags }}

    steps:
      - name: Generate images tags
        id: generate_image_tags
        run: |
          repository_name="${{ needs.generate_docker_repository_name.outputs.repository_name }}"
          short_sha=`echo "${{ github.sha }}" | cut -c 1-7`
          image_tags=`echo -e ${repository_name}:latest\n${repository_name}:${short_sha}`

          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            git_tag=`echo "${{ github.ref }}" | sed "s/refs\/tags\/v//g"`
            image_tags=`echo -e ${image_tags}\n${repository_name}:${git_tag}`
          fi

          echo "::set-output name=image_tags::${image_tags}"

  build:
    needs: generate_docker_image_tags

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install npm packages
        run: npm ci

      - name: Compile TypeScript
        run: tsc

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          push: true
          tags: ${{ needs.generate_docker_image_tags.outputs.image_tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move Docker image chace
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # deploy:
  #   needs:
  #       - generate_docker_repository_name
  #       - build

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Deploy docker image to remote
  #       env:
  #         APP_NAME: everyday_kataribe
  #         DOCKER_REPOSITORY: ${{ needs.generate_docker_repository_name.outputs.repository_name }}
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host    : ${{ secrets.SSH_HOST }}
  #         port    : ${{ secrets.SSH_PORT }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key     : ${{ secrets.SSH_KEY }}
  #         command_timeout: '30m'
  #         script: |
  #           echo "# Download new Docker image"
  #           sudo docker pull ${{ env.DOCKER_REPOSITORY }}

  #           echo "# Stop running Docker container"
  #           sudo systemctl stop ${{ env.APP_NAME }}

  #           echo "# Clean old Docker container"
  #           sudo docker container prune -f

  #           echo "# Create new Docker container"
  #           sudo docker create \
  #           -e    EVERYDAY_KATARIBE_TOKEN="${{ secrets.EVERYDAY_KATARIBE_TOKEN }}" \
  #           -e       TWITTER_BEARER_TOKEN="${{ secrets.TWITTER_BEARER_TOKEN }}" \
  #           -e RANDOM_POST_TWEET_SCHEDULE="${{ secrets.RANDOM_POST_TWEET_SCHEDULE }}" \
  #           -e    ACTIVITY_STREAMING_NAME="${{ secrets.ACTIVITY_STREAMING_NAME }}" \
  #           -e     ACTIVITY_STREAMING_URL="${{ secrets.ACTIVITY_STREAMING_URL }}" \
  #           --name ${{ env.APP_NAME }}_worker \
  #           ${{ env.DOCKER_REPOSITORY }}

  #           echo "# Start new Docker container"
  #           sudo systemctl start ${{ env.APP_NAME }}

  #           echo "# Clean old Docker image"
  #           sudo docker image prune -af
